package com.ticketsystem.payment.domain;

import static com.ticketsystem.payment.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class RefundAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRefundAllPropertiesEquals(Refund expected, Refund actual) {
        assertRefundAutoGeneratedPropertiesEquals(expected, actual);
        assertRefundAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRefundAllUpdatablePropertiesEquals(Refund expected, Refund actual) {
        assertRefundUpdatableFieldsEquals(expected, actual);
        assertRefundUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRefundAutoGeneratedPropertiesEquals(Refund expected, Refund actual) {
        assertThat(actual)
            .as("Verify Refund auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRefundUpdatableFieldsEquals(Refund expected, Refund actual) {
        assertThat(actual)
            .as("Verify Refund relevant properties")
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a -> assertThat(a.getReason()).as("check reason").isEqualTo(expected.getReason()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getProcessedAt()).as("check processedAt").isEqualTo(expected.getProcessedAt()))
            .satisfies(a -> assertThat(a.getGatewayRefundId()).as("check gatewayRefundId").isEqualTo(expected.getGatewayRefundId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRefundUpdatableRelationshipsEquals(Refund expected, Refund actual) {
        assertThat(actual)
            .as("Verify Refund relationships")
            .satisfies(a -> assertThat(a.getPayment()).as("check payment").isEqualTo(expected.getPayment()));
    }
}
